 Create a base class Account featuring methods deposit() and withdraw(). These methods should be overridden by derived classes to execute specific actions tailored to different account types.
a.    Method Overloading:
Derive a class SavingsAccount from Account. Implement method overloading for withdraw() by introducing an additional parameter to specify the reason for withdrawal.

b.    Method Overriding:
Derive a class CheckingAccount from Account. Implement method overriding for withdraw() within the CheckingAccount class, introducing overdraft protection.
c.    Polymorphic Demonstration:
i.    Instantiate objects for both SavingsAccount and CheckingAccount.
ii.    Illustrate polymorphism by invoking the withdraw() method on both objects, highlighting distinct behaviors based on the account type.

2.    Write a Java program in which you will declare an abstract class Vehicle inherits this class from two classes car and truck using the method engine in both displays “car has good engine” and “truck has bad engine”.

3.    Develop an Employee Management System and demonstrate the concept of encapsulation. Create a class named Employee with private attributes for employeeId, firstName, lastName, dateOfBirth, and salary. Implement accessor methods for retrieving attribute values and mutator methods for modifying attributes, ensuring proper validation. Additionally, include a method calculateYearlyBonus() within the Employee class that utilizes encapsulated data to calculate a yearly bonus based on a predetermined formula.
